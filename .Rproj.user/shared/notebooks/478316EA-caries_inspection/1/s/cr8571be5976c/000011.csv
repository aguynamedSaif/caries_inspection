"0","# Assuming you have the train_data and test_data data frames"
"0","# Adjust the column names accordingly if needed"
"0",""
"0","# Convert input variables to numeric in train_data"
"0","train_data[, c(""HEIGHT"", ""CARIES"", ""INCOME"", ""ASCORE"", ""PSCORE"", ""P31.2"", ""P31.6"", ""P31.8"")] <- lapply(train_data[, c(""HEIGHT"", ""CARIES"", ""INCOME"", ""ASCORE"", ""PSCORE"", ""P31.2"", ""P31.6"", ""P31.8"")], as.numeric)"
"0",""
"0","# Convert input variables to numeric in test_data"
"0","test_data[, c(""HEIGHT"", ""CARIES"", ""INCOME"", ""ASCORE"", ""PSCORE"", ""P31.2"", ""P31.6"", ""P31.8"")] <- lapply(test_data[, c(""HEIGHT"", ""CARIES"", ""INCOME"", ""ASCORE"", ""PSCORE"", ""P31.2"", ""P31.6"", ""P31.8"")], as.numeric)"
"0",""
"0","# Now you can proceed with the neural network code"
"0","# ..."
"0",""
"0","library(neuralnet)"
"0",""
"0","# Combine the scaled predictors and the target variable in the training data"
"0","train_data_combined <- cbind(train_data[, -which(names(train_data) == ""kns"")], kns = train_data$kns)"
"0",""
"0","# Build the neural network model"
"0","neural_model <- neuralnet(kns ~ ., data = train_data_combined, hidden = c(5, 3), linear.output = FALSE)"
"0",""
"0","# Make predictions using the neural network model on the test data"
"0","predicted_probs <- compute(neural_model, test_data[, -which(names(test_data) == ""kns"")])$net.result"
"0",""
"0","# Convert predicted probabilities to predicted classes (0 or 1)"
"0","predicted_classes <- ifelse(predicted_probs > 0.5, 1, 0)"
"0",""
"0","# Create a data frame to store the predicted values and actual values"
"0","comparison <- data.frame(Actual_kns = test_data$kns, Predicted_kns = predicted_classes)"
"0",""
"0","# Calculate accuracy"
"0","accuracy_nn <- sum(comparison$Actual_kns == comparison$Predicted_kns) / nrow(comparison)"
"0",""
"0","# Calculate RMS"
"0","rms_nn <- sqrt(mean((comparison$Actual_kns - comparison$Predicted_kns)^2))"
"0",""
"0","# Print accuracy and RMS"
"0","print(paste(""Accuracy:"", accuracy_nn))"
"1","[1]"
"1"," ""Accuracy: 0.960526315789474"""
"1","
"
"0","print(paste(""RMS:"", rms_nn))"
"1","[1]"
"1"," ""RMS: 0.198679853559757"""
"1","
"
